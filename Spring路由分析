基于Spring路由的认证鉴权绕过分析
Spring的Web框架不带有认证鉴权模块，一般会通过其他框架或者自己实现等方式实现认证鉴权，此时，不同模块之间的uri解析方式可能会导致绕过
uri解析
 
Spring对于uri的特殊处理主要包括四个方面：分号截断、url解码、重复斜杠替换、../解析，均在UrlPathHelper类中实现，其中，分号截断函数removeSemicolonContent、url解码函数decodeRequestString、../解析函数getPathWithinServletMapping，均有对参数进行判断的步骤，分别为removeSemicolonContent默认为true、urlDecode默认为true、以及alwaysUseFullPath和servlet4Present参数，这些参数均可由开发者重新配置
需要注意的是，在Springboot <= 2.3.0.RELEASE版本中，仅对alwaysUseFullPath参数进行判断，且该参数默认为false，处理../
 
在Springboot > 2.3.0.RELEASE后，alwaysUseFullPath默认为true，不再处理../，我分析的Springboot版本为2.7.14，该版本中alwaysUseFullPath仍默认为false，但加入了skipServletPathDetermination函数的判断，该函数会进行servlet4Present参数判断等操作，造成的结果也是默认不处理../
 
 
虽然默认不处理../，但是在服务器配置了contextPath的情况，也会有一种绕过的情况，如一开始的解析路径展示的，Spring在解析uri时，会先获取ContextPath，再获取RequestUri，最后从RequestUri中删去ContextPath
在通过Request#getContextPath方法获取ContextPath时，首先会从配置文件中得到配置的ContextPath，而后从请求获取uri进行匹配
 
在匹配过程中，会①循环查找/，得到请求uri的前缀，例如，请求为/abc/../spring-boot，会得到前缀/abc，/abc/..，并对其进行②normalize一般化处理，也就会解析../。不断循环，直到匹配配置的ContextPath，在此例中为/spring-boot，然后将uri截断，得到请求的ContextPath，在此例中为/abc/../spring-boot
 
由此就可实现通过ContextPath解析../进行绕过，若过滤器配置为/spring-boot/admin*不允许访问，对ContextPath又无特殊处理，可构造/abc/../spring-boot/admin绕过过滤器，而后Spring将请求拆分为，/abc/../spring-boot和/admin，成功绕过过滤器访问admin
RequestUri无法解析../
 
ContextPath可以解析../
 
Handler匹配
 
Spring通过解析得到的路径进行匹配得到handler，主要有三种处理方式，后缀匹配、url尾部带斜杠，匹配ant风格url
其中后缀匹配和url尾部斜杠匹配是特殊处理，分别可通过useSuffixPatternMatch和useTrailingSlashMatch参数进行配置，这两个参数也可由开发者自定义，AntPathMatcher#doMatch方法为一般匹配方式
认证鉴权绕过分析
Spring框架初始不包含认证鉴权模块，当通过其他框架或者自己编写过滤器实现鉴权时，可能会由于uri解析之间的差异导致认证鉴权被绕过，在此基础上我总结了以下几点
	过滤器必须默认实现url解码，否则，无论实现了何种检测，都可通过url编码简单绕过，例如/admin->/%61dmin
	过滤器对于分号、重复斜杠、../的处理，应保持与Spring框架一致，开发者需要关注所采用的Spring框架版本中对于这些处理方式参数的配置，这些地方的解析不一致，均可能导致过滤器被绕过，例如，过滤器匹配/admin*
	Spring分号截断，过滤器不截断，可通过/;abc/admin绕过
	Spring处理../，过滤器不处理，可通过/abc/../admin绕过
	Spring处理重复斜杠，过滤器不处理，可通过///admin绕过
	对于url的匹配方式，例如url带扩展名、尾部带斜杠等，认证鉴权模块也应与Spring保持一致
	认证鉴权时不忽略扩展名，Spring忽略扩展名，可通过/admin.*绕过
	认证鉴权时将尾部斜杠视为下一个目录，Spring忽略尾部斜杠，可通过/admin/绕过
	原则上，认证鉴权模块的uri处理方式应与响应请求模块的处理方式保持一致，不一致的地方应考虑是否可能存在被绕过的情况，否则，如果只是部分一致，攻击者可能可以仅通过一处不一致实现绕过，例如url解码、扩展名、尾部斜杠等
