Fastjson反序列化漏洞分析
漏洞背景
Fastjson提供了通过parseObject/parse方法将传入的字符串反序列化为Java对象，在反序列化的同时会调用set/get方法来访问属性，由此，如果攻击者能构造字符串控制反序列化的Java对象，且该对象的set/get方法中存在可利用点，则可造成漏洞利用，例如
构造可利用类Evil，在setCmd方法中存在命令执行
 
构造恶意字符串，对象为Evil，设置参数cmd为需要执行的命令，即可通过Fastjson反序列化解析造成任意命令执行漏洞
 
Fastjson<=1.2.24
漏洞分析
在该版本中，fastjson允许在反序列化字符串中通过@type参数指定任意类，所以只需找到存在可以利用的set/get方法的类即可利用该漏洞，例如TemplatesImpl利用链
在com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl类中存在_outputPropertiesget变量，在该变量的get方法中会调用newTransformer()函数
 
在该函数中，又会调用getTransletInstance()
 
首先需要_name不为空，且_class为空，从而进入defineTransletClasses()，这两个变量均为TemplatesImpl类的成员变量
 
而后判断_bytecodes不为空，并且_tfactory不为空，否则报错，并将_bytecodes赋值给_class变量
 
 
再回到getTransletInstance()函数，通过_class变量的值实例化对象，造成恶意代码执行
 
通过TemplatesImpl利用链：
getOutputProperties()--->newTransformer()--->getTransletInstance()--(name!=null&&class==null)-->defineTransletClasses()--(_bytecodes!=null&&_tfactory!=null)-->newInstance()
构造exp
 
结合该版本fastjson可通过@type指定类以及自动调用set/get函数的特性，即可通过反序列化造成任意命令执行漏洞
漏洞修复
在之后的版本中，fastjson引入了checkAutotype安全机制，默认autotype==false不允许通过@type指定类，并加入了黑白名单，后续的漏洞主要都是针对这方面的绕过
Fastjosn<=1.2.41
漏洞分析
该版本的漏洞主要是针对autotype==true时的黑名单的绕过，通过在@type参数中类的首尾分别加入L、;实现绕过
checkAutoType()函数在进行检查时，会对黑白名单分别进行检测
白名单匹配则加载类，黑名单匹配则报错，检测时，是通过startsWith进行匹配
 
当在类的开头加入L，自然不会被黑名单匹配到，实现绕过，检查过后，会通过类名加载类
 
在loadClass()方法中，会对开头为L和结尾为;的类名进行拆分，最后返回正确的类名
 
通过这个方法，就能绕过黑名单，并且使用正确的类名进行解析，从而造成漏洞
在分析过程中发现loadClass()方法不仅会对首L尾;进行判断，还会对开头[进行判断，这是一种针对JNI字段描述符做的解析，这是一种对函数返回值和参数的编码，"[Ljava/lang/Object;"就是表示Object[]类型的对象，[也是一种可以用于绕过的方法
 
漏洞修复
将类名字符串匹配改成了hash值匹配，并且加入了对L和;的判断
 
1.2.42-1.2.45
1.2.42中hash的混淆只是使代码更难辨认，针对漏洞的修复主要是对L和;的处理，只是简单的判断开头L和结尾;，然后将其剔除，所以只需双写L和;即可绕过
 
1.2.43中虽然针对双写也进行了过滤，但是上面分析过程中发现的[还是有特殊的解析方式，可以通过构造特殊类名绕过检查，并顺利解析，类名开头加入[，最后的引号后面改为[,{
 
1.2.44中对[开头或者L开头;结尾做了过滤，直接抛出异常
 
在后面的版本中又发现了黑名单不完全，通过mybatis、JndiObjectFactory、AnterosDBCPConfig等其他库进行利用，一直到1.2.67都还有发现新的gadget
Fastjson<=1.2.47
漏洞分析
通过构造两个json字符串，在关闭了autotype的情况下实现绕过
 
当autotype==true时，会先对@type传入的类名进行黑白名单检查，当autotype==false时，会直接先通过getClassFromMapping()和findClass()获取类，如果获得到类，则直接返回该类，不进行下面的黑白名单检查，这个漏洞就是通过将类加入到mappings中实现绕过黑白名单
 
跟进findClass()方法，可以看到里面通过变量buckets集合的方式查找对应类名的类
 
bucket中含有我们构造的java.lang.Class，成功获取到类，但是这样还只是绕过了黑白名单，我们还需要让程序反序列化可以被利用的类
 
checkAutoType()的上层函数为DefaultJSONParser#parseObject，通过checkAutoType得到类后，会对其进行反序列化
 
 
在MiscCodec#deserialze方法中首先会在json字符串中查找val，并获取它的值赋值给objVal变量，在该poc中val的值为我们可利用的类com.sun.rowset.JdbcRowSetImpl
 
而后判断clazz（poc中为java.lang.Class）类型，进行对应的加载类的操作，但传递的参数是从json字符串获取的val值（poc中为com.sun.rowset.JdbcRowSetImpl），这种校验时是通过@type参数，而加载时是通过val参数的前后不一致，也是造成漏洞的原因之一
 
在TypeUitls#loadClass方法中，会通过传递的字符串类名获取类，而后如果开启了cache（默认为true），会将其加入到mappings中，也就是一开始说的getClassFromMapping()方法需要用到的mappings，此时就达成了我们将可利用类加入到mappings从而跳过黑白名单检查直接返回类的目的
 
当第一个json字符串解析结束时，会进行第二个字符串的解析，过程一致，唯一的区别在于，通过getClassFromMapping获取类时，可以查询成功，从而可以直接返回我们的可利用类com.sun.rowset.JdbcRowSetImpl，通过反序列化造成危害
 
漏洞修复
在MiscCodec，处理Class类的地方，设置了cache为false
Fastjson<=1.2.68
漏洞分析
分析该版本的checkAutoType方法，其中有多个return clazz语句，本次漏洞利用的就是控制expectClass为可利用类的接口，从而绕过检查，返回可利用类
 
为方便演示，构造一个可利用类实现java.lang.AutoCloseable接口
 
构造json字符串，两个@type，分别为接口类和实现的可利用类
 
Fastjson反序列化首先会对第一个@type的值进行解析，在checkAutoType()中，java.lang.AutoCloseable接口类存在于mapping中，可以直接获取并返回类
 
回到DefaultJSONParser#parseObject，下一步对其进行反序列化
 
在JavaBeanDeserializer#deserialze中，会通过getSeeAlso生成反序列化对象，但是由于我们传入的是接口类，默认情况无法反序列化，所以refObj为空，而后fastjson会对json字符串后面的@type的值继续进行checkAutoType获取类，此时，传入了expectClass参数为一开始的java.lang. AutoCloseable，这样就实现了我们开头说的，构造expectClass实现绕过
 
所以利用这个漏洞的关键就是要找到实现了接口的可以利用的类，并且接口类位于buckets或者mapping中，需要针对依赖具体分析，不同的期望类所解析的方式也有可能不同，如果是java.lang.AutoCloseable的反序列化器，是通过createInstance创建对象，利用的是类的构造函数
 
也可以通过从期望类获取类的时候，会将类加入到mapping的特性，扩展到更多类的利用
 
漏洞修复
在checkAutoType中加入了对expectClass的判读，出现如下类名则不设置flag，hash对应类名如下
  
Fastjson<=1.2.80
漏洞分析
漏洞原理和1.2.68一致，都是通过期望类跳过检查，这次用的是java.lang.Exception
漏洞修复
在1.2.83的checkAutoType中对Throwable的子类做了特殊处理
 
 
同时对于未开启autoTypeSupport时不将类加入到mapping中
 
总结
本次主要针对Fastjson自身存在的漏洞进行分析，主要可以分为两类，一类是过滤不完全造成的绕过，比如黑名单不完全、双写绕过等，一类是利用自身特性造成的绕过，比如期望类、缓存等，后续的利用需要和其他gadget的结合，涉及到依赖范围较广，这里没有进一步深入分析，针对这些漏洞，总结Fastjson的检查方法如下：
	safeMode判断，开启后传入@type直接报错，autoType判断，开启关闭有不同的黑白名单检查顺序、期望类是否缓存等
	@type值长度判断(未造成漏洞限制)，哈希值混淆(对安全性帮助不大)
	检查@type指定的类，L开头;结尾、[开头直接报错，黑白名单前缀匹配
	期望类黑名单，默认不缓存
